package pku.edu.cigrlogger.GPSRINEX;



import android.annotation.SuppressLint;
import android.content.Context;
import android.location.GnssClock;
import android.os.Environment;
import android.util.Log;
import java.util.Locale;
import pku.edu.cigrlogger.GPSRINEX.Constants;
import pku.edu.cigrlogger.GPSRINEX.GpsTime;
import pku.edu.cigrlogger.GPSRINEX.GpsSatellite;

//import edu.osu.pcv.marslogger.GPSRINEX.R;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;



public class Rinex {

    private static final String TAG = Rinex.class.getSimpleName();

    private FileWriter out = null;
    private char line[] = new char[81];

    private Context context;

    public Rinex(Context context) {
        this.context = context;
        //createFile();
        //testwritehead();
    }

    public void closeFile() {
        Log.i(TAG, "CloseFile");
        try {
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void resetLine() {
        for (int i = 0; i < 80; i++)
            line[i] = ' ';
    }

    private void writeLine(String label) {
        for (int i = 0; i < label.length(); i++)
            line[i + 60] = label.charAt(i);
        try {
            line[80] = '\n';
            out.write(line);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void createFile(String outputpath) {
        Date date = new Date();
        String dateString = new SimpleDateFormat("yyyyMMddHHmmss", Locale.US).format(date);
        String type = "o"; //Observable file
        int year = Integer.parseInt(new SimpleDateFormat("yy", Locale.US).format(date));
        String yearString;
        if (year - 10 < 0)
            yearString = "0" + year;
        else
            yearString = "" + year;
        String fileName = "GN" + dateString + "303" + "." + yearString + type;
        String folderName = dateString;
        //String Dir =context.getExternalFilesDir(
              //  Environment.getDataDirectory().getAbsolutePath()).getAbsolutePath();
        String outputDir = outputpath + File.separator + folderName;//建立时间文件夹
        (new File(outputDir)).mkdirs();

        int aaa =1;
        try {
            //File file = new File(rootFile, fileName);
            File file = new File(outputDir,fileName);
            out = new FileWriter(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Log.i(TAG, "CreateFile, File name = " + fileName);
    }

    public void writeHeader(RinexHeader rinexHeader) { //header labels in columns 61-80
        Log.i(TAG, "WriteHeader");
        //GpsTime gpsFirstTime=rinexHeader.getGpsTime();

        //RINEX VERSION / TYPE
        resetLine();
        String version = "3.03";
        String type = "OBSERVATION DATA";
        String source = "M: Mixed";
        for (int i = 0; i < version.length(); i++)
            line[i + 5] = version.charAt(i);
        for (int i = 0; i < type.length(); i++)
            line[i + 20] = type.charAt(i);
        for (int i = 0; i < source.length(); i++)
            line[i + 40] = source.charAt(i);
        writeLine("RINEX VERSION / TYPE");

        //PGM / RUN BY / DATE
        resetLine();
        String program = "GnssRecord";
        String agency = "2851";
        SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMdd hhmmss", Locale.US);
        formatDate.setTimeZone(TimeZone.getTimeZone("UTC"));
        String dateCreation = formatDate.format(new Date()) + " UTC";
        for (int i = 0; i < program.length(); i++)
            line[i] = program.charAt(i);
        for (int i = 0; i < agency.length(); i++)
            line[i + 20] = agency.charAt(i);
        for (int i = 0; i < dateCreation.length(); i++)
            line[i + 40] = dateCreation.charAt(i);
        writeLine("PGM / RUN BY / DATE");

        //COMMENT
        resetLine();
        for (int i = 2; i < 58; i++)
            line[i] = '-';
        writeLine("COMMENT");
        resetLine();
        String commentLineOne = "This file is generated by CIGR(Camera IMU GPS in ";
        for (int i = 0; i < commentLineOne.length(); i++)
            line[i + 9] = commentLineOne.charAt(i);
        writeLine("COMMENT");
        resetLine();
        String commentLineTwo = "Rinex) App.";
        for (int i = 0; i < commentLineTwo.length(); i++)
            line[i + 9] = commentLineTwo.charAt(i);
        writeLine("COMMENT");
        resetLine();
        for (int i = 2; i < 58; i++)
            line[i] = '-';
        writeLine("COMMENT");


        //MARKER NAME
        resetLine();
        for (int i = 0; i < rinexHeader.getMarkName().length(); i++)
            line[i] = rinexHeader.getMarkName().charAt(i);
        writeLine("MARKER NAME");

        //MARKER TYPE

        resetLine();
        for (int i = 0; i < rinexHeader.getMarkType().length(); i++)
            line[i] = rinexHeader.getMarkType().toUpperCase().charAt(i);
        writeLine("MARKER TYPE");


        //OBSERVER / AGENCY
        resetLine();
        for (int i = 0; i < rinexHeader.getObserverName().length(); i++)
            line[i] = rinexHeader.getObserverName().charAt(i);
        for (int i = 0; i < rinexHeader.getObserverAgencyName().length(); i++)
            line[i + 20] = rinexHeader.getObserverAgencyName().charAt(i);
        writeLine("OBSERVER / AGENCY");


        //REC # / TYPE / VERS
        resetLine();
        for (int i = 0; i < rinexHeader.getReceiverNumber().length(); i++)
            line[i] = rinexHeader.getReceiverNumber().charAt(i);
        for (int i = 0; i < rinexHeader.getReceiverType().length(); i++)
            line[i + 20] = rinexHeader.getReceiverType().charAt(i);
        for (int i = 0; i < rinexHeader.getReceiverVersion().length(); i++)
            line[i + 40] = rinexHeader.getReceiverVersion().charAt(i);
        writeLine("REC # / TYPE / VERS");


        //ANT # / TYPE
        resetLine();
        for (int i = 0; i < rinexHeader.getAntennaNumber().length(); i++)
            line[i] = rinexHeader.getAntennaNumber().charAt(i);
        for (int i = 0; i < rinexHeader.getAntennaType().length(); i++)
            line[i + 20] = rinexHeader.getAntennaType().charAt(i);
        writeLine("ANT # / TYPE");

        //APPROX POSITION XYZ
        resetLine();
        String xPosition = rinexHeader.getCartesianX();
        String yPosition = rinexHeader.getCartesianY();
        String zPosition = rinexHeader.getCartesianZ();
        for (int i = 0; i < xPosition.length(); i++)
            line[13 - i] = xPosition.charAt(xPosition.length() - 1 - i);
        for (int i = 0; i < yPosition.length(); i++)
            line[27 - i] = yPosition.charAt(yPosition.length() - 1 - i);
        for (int i = 0; i < zPosition.length(); i++)
            line[41 - i] = zPosition.charAt(zPosition.length() - 1 - i);
        writeLine("APPROX POSITION XYZ");

        //ANTENNA: DELTA H/E/N
        resetLine();
        String hDelta = String.format(Locale.US, "%.4f", rinexHeader.getAntennaHeight());
        String eDelta = String.format(Locale.US, "%.4f", rinexHeader.getAntennaEccentricityEast());
        String nDelta = String.format(Locale.US, "%.4f", rinexHeader.getAntennaEccentricityNorth());
        for (int i = 0; i < hDelta.length(); i++)
            line[13 - i] = hDelta.charAt(hDelta.length() - 1 - i);
        for (int i = 0; i < eDelta.length(); i++)
            line[27 - i] = eDelta.charAt(eDelta.length() - 1 - i);
        for (int i = 0; i < nDelta.length(); i++)
            line[41 - i] = nDelta.charAt(nDelta.length() - 1 - i);
        writeLine("ANTENNA: DELTA H/E/N");


        //SYS / # / OBS TYPES
        String gSys = "G    8 C1C L1C D1C S1C C5Q L5Q D5Q S5Q";

        resetLine();
        for (int i = 0; i < gSys.length(); i++)
            line[i] = gSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");
        resetLine();

        //SYS / # BDS OBS TYPES
        String bSys = "C    4 C2I L2I D2I S2I";

        resetLine();
        for (int i = 0; i < bSys.length(); i++)
            line[i] = bSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");
        resetLine();

        //TIME OF FIRST OBS
        resetLine();
        /*
        String year = String.valueOf(1999);
        String month = String.valueOf(12);
        String day = String.valueOf(25);
        String hour = String.valueOf(8);
        String min = String.valueOf(8);
        @SuppressLint("DefaultLocale") String sec = String.format("%.7f",0);


        String system = "GPS";
        for (int i = 0; i < year.length(); i++)
            line[5 - i] = year.charAt(year.length() - 1 - i);
        for (int i = 0; i < month.length(); i++)
            line[11 - i] = month.charAt(month.length() - 1 - i);
        for (int i = 0; i < day.length(); i++)
            line[17 - i] = day.charAt(day.length() - 1 - i);
        for (int i = 0; i < hour.length(); i++)
            line[23 - i] = hour.charAt(hour.length() - 1 - i);
        for (int i = 0; i < min.length(); i++)
            line[29 - i] = min.charAt(min.length() - 1 - i);
        for (int i = 0; i < sec.length(); i++)
            line[42 - i] = sec.charAt(sec.length() - 1 - i);
        for (int i = 0; i < system.length(); i++)
            line[50 - i] = system.charAt(system.length() - 1 - i);

         */
        writeLine("TIME OF FIRST OBS");


        String Gphase_shifter = "G L1C";
        resetLine();
        for (int i = 0; i < Gphase_shifter.length(); i++)
            line[i] = Gphase_shifter.charAt(i);
        writeLine("SYS / PHASE SHIFTS");
        resetLine();

        String GL5phase_shifter = "G L5Q -0.25000";
        resetLine();
        for (int i = 0; i < GL5phase_shifter.length(); i++)
            line[i] = GL5phase_shifter.charAt(i);
        writeLine("SYS / PHASE SHIFTS");
        resetLine();

        String Bphase_shifter = "C L2I";
        resetLine();
        for (int i = 0; i < Bphase_shifter.length(); i++)
            line[i] = Bphase_shifter.charAt(i);
        writeLine("SYS / PHASE SHIFTS");
        resetLine();




        //END OF HEADER
        //resetLine();
        writeLine("END OF HEADER");
    }

    //一个历元的数据进行转换
    @SuppressLint("DefaultLocale")
    public void writeBody(EpochMeasurement epochMeasurement)
    {


            StringBuilder stringBuilder = new StringBuilder();

            //每一个历元的开始

            stringBuilder.append(String.format("> %d %2d %2d %2d %2d%11.7f  0%3d", epochMeasurement.getEpochTime().getYear(), epochMeasurement.getEpochTime().getMonth(), epochMeasurement.getEpochTime().getDay(), epochMeasurement.getEpochTime().getHour(), epochMeasurement.getEpochTime().getMinute(), epochMeasurement.getEpochTime().getSecond(), epochMeasurement.getSatelliteNum()));

            stringBuilder.append('\n');


            //开始一个历元的卫星数据


            for (GpsSatellite gpsSatellite : epochMeasurement.getGpsSatelliteList()) {
                double phaseL1 = 0.0D;
                double phaseL5 = 0.0D;
                if (gpsSatellite.isHasC1() && gpsSatellite.isHasC5()) {
                    phaseL1 = gpsSatellite.getL1();
                    phaseL5 = gpsSatellite.getL5();
                    stringBuilder.append(String.format("%s%14.3f",gpsSatellite.getPrn(), gpsSatellite.getC1()));
                    if(Math.abs(phaseL1)>0.0D) //如果相位都有效
                        stringBuilder.append(String.format("  %14.3f%s",gpsSatellite.getL1(),gpsSatellite.getLLI1()));
                    else
                        stringBuilder.append(String.format("%17s"," "));
                    stringBuilder.append(String.format(" %14.3f  %14.3f  %14.3f",gpsSatellite.getD1(), gpsSatellite.getS1(), gpsSatellite.getC5()));
                    if(Math.abs(phaseL5)>0.0D)
                        stringBuilder.append(String.format("  %14.3f%s",gpsSatellite.getL5(),gpsSatellite.getLLI5()));
                    else
                        stringBuilder.append(String.format("%17s"," "));
                    stringBuilder.append(String.format(" %14.3f  %14.3f",gpsSatellite.getD5(), gpsSatellite.getS5()));
                    stringBuilder.append('\n');
                }
                if (gpsSatellite.isHasC1() && !gpsSatellite.isHasC5()) {
                    phaseL1 = gpsSatellite.getL1();
                    stringBuilder.append(String.format("%s%14.3f",gpsSatellite.getPrn(), gpsSatellite.getC1()));
                    if(Math.abs(phaseL1)>0.0D) //如果相位都有效
                        stringBuilder.append(String.format("  %14.3f%s",gpsSatellite.getL1(),gpsSatellite.getLLI1()));
                    else
                        stringBuilder.append(String.format("%17s"," "));
                    stringBuilder.append(String.format(" %14.3f  %14.3f",gpsSatellite.getD1(), gpsSatellite.getS1()));
                    stringBuilder.append('\n');
                }
                if (!gpsSatellite.isHasC1() && gpsSatellite.isHasC5()) {
                    phaseL5 = gpsSatellite.getL5();
                    stringBuilder.append(String.format("%s%14s  %14s  %14s  %14s  %14.3f",gpsSatellite.getPrn(), " ", " ", " ", " ", gpsSatellite.getC5()));
                    if(Math.abs(phaseL5)>0.0D) //如果相位都有效
                        stringBuilder.append(String.format("  %14.3f%s",gpsSatellite.getL5(),gpsSatellite.getLLI5()));
                    else
                        stringBuilder.append(String.format("%17s"," "));
                    stringBuilder.append(String.format(" %14.3f  %14.3f",gpsSatellite.getD5(), gpsSatellite.getS5()));
                    stringBuilder.append('\n');
                }

        }
        for (BdsSatellite bdsSatellite : epochMeasurement.getBdsSatelliteList()) {
            double phaseB1 = 0.0D;
            phaseB1 = bdsSatellite.getL2I();
            stringBuilder.append(String.format("%s%14.3f",bdsSatellite.getPrn(), bdsSatellite.getC2I()));
            if(Math.abs(phaseB1)>0.0D) //如果相位都有效
                stringBuilder.append(String.format("  %14.3f%s",bdsSatellite.getL2I(),bdsSatellite.getLLI2I()));
            else
                stringBuilder.append(String.format("%17s"," "));
            stringBuilder.append(String.format(" %14.3f  %14.3f",bdsSatellite.getD2I(), bdsSatellite.getS2I()));
            stringBuilder.append('\n');
        }
        try {
            out.write(stringBuilder.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    /*
    public void testwritehead(){//测试更改打印时间方法后 打印的时间是不是和GEO++ 一致
        SimpleDateFormat dateFormat =
                new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
        String folderName = dateFormat.format(new Date());
        String dir3 = context.getExternalFilesDir(
                Environment.getDataDirectory().getAbsolutePath()).getAbsolutePath();
        String outputDir = dir3 + File.separator + folderName;
        (new File(outputDir)).mkdirs();

        try {
            String fileName = "CPStime.txt";
            File file = new File(outputDir,fileName);
            out = new FileWriter(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void testwrite(GnssClock gnssClock){
        long TimeNanos = gnssClock.getTimeNanos();
        long FullBiasNanos = gnssClock.getFullBiasNanos();
        double BiasNanos = gnssClock.getBiasNanos();
        StringBuilder stringBuilder = new StringBuilder();
        long paramLong1 = TimeNanos+Math.abs(FullBiasNanos);
        Locale locale = Locale.UK;
        stringBuilder.append(String.format(locale, "%07d", new Object[] { Long.valueOf(paramLong1 / 100L % 10000000L) }));
        stringBuilder.append("       ");
        GpsTime gpsTime = new GpsTime(gnssClock);
        //double second = gpsTime.getSecond();
        stringBuilder.append(String.format("%11.7f",gpsTime.getSecond()));
        stringBuilder.append("\n");
        try {
            out.write(stringBuilder.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    */
}
